name: build-desktop

on:
  push:

jobs:
  build:
    env:
      BUILD_MIRROR: "http://archive.ubuntu.com/ubuntu"
      SUIT: "bionic"
      USERNAME: "user"
      PRODUCT_MIRROR: "http://mirrors.tuna.tsinghua.edu.cn/ubuntu"
    runs-on: ubuntu-18.04
    
    steps:
      -
        name: Checkout
        uses: actions/checkout@v2
      -
        name: Cache Deb Packages
        uses: actions/cache@v2
        if: github.event_name == 'push'
        with:
          path: /tmp/.debuildcache
          key: ${{ runner.os }}-debs-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-debs-
      -
        name: Cache Deb Packages
        uses: actions/cache@v2
        if: github.event_name == 'pull_request'
        with:
          path: /tmp/.debuildcache
          key: ${{ runner.os }}-pr-${{ github.event.pull_request.head.user.login }}-debs-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-pr-${{ github.event.pull_request.head.user.login }}-debs-
            ${{ runner.os }}-debs-
      - name: Find out current mirror in the build environment
        continue-on-error: true
        run: | 
          if [ "$(lsb_release -i -s )" != "Ubuntu" ]; then
            exit 0;
          fi
          cat /etc/apt/sources.list | grep "^deb" |
            grep "$(lsb_release -c -s)"  | awk '{print $2}' | sed 's@/$@@' |
            while read url; do
              if curl --head -sfL "${url}/dists/${SUIT}/InRelease" > /dev/null; then
                echo "Found current mirror: ${url}" >&2
                echo "::set-env name=BUILD_MIRROR::${url}"
                break;
              fi
            done
          exit 0;
      -
        name: Cache Deb Packages
        if: github.event_name != 'push' && github.event_name != 'pull_request'
        run: |
          echo "I do not know how to setup cache"
          exit -1
      -
        name: Prepare build environment
        run: |
          echo "deb ${BUILD_MIRROR} focal main restricted" | sudo tee /etc/apt/sources.list.d/focal.list
          sudo apt-get update
          sudo apt-get install -t focal -y debootstrap
          
      - 
        name: Debootstrap
        run: |
          sudo mkdir -p rootfs/
          mkdir -p /tmp/.debuildcache/
          sudo debootstrap \
            --cache-dir=/tmp/.debuildcache \
            --merged-usr --arch=amd64 \
            --components=main,universe,non-free \
            --include="$(sed -r 's/^[ \t]+//; s/[ \t]+$//; /^#/d;' packages.list | tr '\n' ',' | sed -r 's/,+/,/g; s/,$//')" \
            "$SUIT" rootfs/ "$BUILD_MIRROR"
      - 
        name: Bind mount proc, sys
        run: |
          for i in sys proc; do
            sudo mount --bind /$i rootfs/$i
          done
      - name: Prepare to configure
        run: |
          cat > /tmp/func << 'EOF'
          export LANG=C
          in-root(){
            sudo chroot rootfs "$@"
          }
          EOF
      - 
        name: Post install configuration
        run: |
          . /tmp/func
          in-root debconf-set-selections <<EOF
          locales	locales/locales_to_be_generated	multiselect	en_US.UTF-8 UTF-8, zh_CN.UTF-8 UTF-8
          locales	locales/default_environment_locale	select	en_US.UTF-8
          tzdata	tzdata/Areas	select	Asia
          tzdata	tzdata/Zones/Asia	select	Shanghai
          EOF
          in-root rm -f "/etc/locale.gen"
          in-root ln -fs /usr/share/zoneinfo/Asia/Shanghai /etc/localtime 
          in-root dpkg-reconfigure --frontend noninteractive locales < /dev/null
          in-root dpkg-reconfigure --frontend noninteractive tzdata < /dev/null
          sudo tee rootfs/etc/apt/sources.list << EOF
          deb ${BUILD_MIRROR} ${SUIT} main restricted
          deb ${BUILD_MIRROR} ${SUIT}-updates main restricted

          deb ${BUILD_MIRROR} ${SUIT} universe
          deb ${BUILD_MIRROR} ${SUIT}-updates universe

          deb ${BUILD_MIRROR} ${SUIT} multiverse
          deb ${BUILD_MIRROR} ${SUIT}-updates multiverse

          deb ${BUILD_MIRROR} ${SUIT}-backports main restricted universe multiverse
          EOF
      -
        name: Install additional softwares
        run: |
          . /tmp/func
          curl -fsL "https://download.sublimetext.com/sublimehq-pub.gpg" | in-root apt-key add -
          curl -fsL "https://packages.microsoft.com/keys/microsoft.asc" | in-root apt-key add -
          echo "deb https://download.sublimetext.com/ apt/stable/" | sudo tee rootfs/etc/apt/sources.list.d/sublime-text.list
          echo "deb https://packages.microsoft.com/repos/vscode stable main" | sudo tee rootfs/etc/apt/sources.list.d/vscode.list
          in-root apt-get update
          in-root apt-get -y dist-upgrade
          in-root apt-get purge -y network-manager netplan.io snap snapd apport
          in-root systemctl mask systemd-networkd
          in-root apt-get install -y code sublime-text
           